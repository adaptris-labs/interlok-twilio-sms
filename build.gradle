import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*
plugins {
  id "java"
  id "distribution"
  id "jacoco"
  id "com.palantir.docker" version "0.22.1"
}

ext {
  interlokParentGradle = "https://raw.githubusercontent.com/adaptris-labs/interlok-build-parent/master/build.gradle"
  interlokVersion = '3.9.2-RELEASE'
  interlokUiVersion = interlokVersion
  releaseVersion = '3.9-SNAPSHOT'
  nexusBaseUrl  = 'https://nexus.adaptris.net'
  javadocsBaseUrl = "${nexusBaseUrl}/nexus/content/sites/javadocs/com/adaptris"
  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokVersion
  interlokCommonJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokVersion
  componentName='Interlok/Twilio SMS'
  organizationName = "Adaptris Labs"
  organizationUrl = "https://interlok.adaptris.net/"
  log4j2Version = '2.12.1'
  slf4jVersion = '1.7.29'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

allprojects {
  apply from: "${interlokParentGradle}"
}


sourceCompatibility = 1.8
group   = 'io.github.adaptris-labs'
version = releaseVersion
def versionDir = "$buildDir/version"

dockerfileZip.enabled=false

repositories {
    mavenCentral()
    maven { url "${nexusBaseUrl}/nexus/content/groups/public" }
    maven { url "${nexusBaseUrl}/nexus/content/groups/interlok" }
}

configurations {
  javadoc {}
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  compile ("com.adaptris:interlok-core:$interlokVersion") { changing= true}
  compile ("com.adaptris:interlok-common:$interlokVersion") { changing= true}
  compile ("org.slf4j:slf4j-api:$slf4jVersion")
  compile ("com.twilio.sdk:twilio:7.11+") {
    exclude group:"org.apache.httpcomponents", module: "httpclient"
    exclude group:"com.fasterxml.jackson.core", module: "jackson-databind"
    exclude group:"com.fasterxml.jackson.core", module: "jackson-core"
  }
  compile ("org.apache.httpcomponents:httpclient:4.5.10")
  compile ("com.fasterxml.jackson.core:jackson-databind:2.10.1")

  testCompile ('junit:junit:4.12')
  testCompile ("com.adaptris:interlok-stubs:$interlokVersion") { changing= true}
  testCompile ("org.apache.logging.log4j:log4j-core:$log4j2Version")
  testCompile ("org.apache.logging.log4j:log4j-1.2-api:$log4j2Version")
  testCompile ("org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version")
  testCompile ("org.apache.logging.log4j:log4j-api:$log4j2Version")

  // This is to make sure that the annotation processors are enabled during the
  // compile phase.
  annotationProcessor ("com.adaptris:interlok-core-apt:$interlokVersion") { changing= true}
  testAnnotationProcessor ("com.adaptris:interlok-core-apt:$interlokVersion") { changing= true}
  // To handle the custom javadoc taglets.
  javadoc("com.adaptris:interlok-core-apt:$interlokVersion") { changing= true}
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}

sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}

// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'build.version', value: releaseVersion)
      entry(key: 'groupId', value: project.group)
      entry(key: 'artifactId', value: project.name)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      entry(key: 'build.info', value:  new Date().format('HH:mm:ss z'))
    }
  }
}

distributions {
  main {
    contents {
      into('') {
        from ("src/main/interlok")
        exclude "config"
      }
      into('config') {
        from(localizeConfig)
      }
      into('lib') {
        from(project.configurations.runtime)
        from(project.configurations.interlokRuntime)
        from(serviceTesterDist)
        from(jar)
      }
      into('webapps') {
        from(interlokWarDist)
      }
      into('docs/javadocs') {
        from(project.configurations.interlokJavadocs)
      }
      rename '(.*)-[0-9]+\\..*.jar', '$1.jar'
      rename '(.*)-[0-9]+\\..*.war', '$1.war'
      duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
  }
}

docker {
  name "adaptrislabs/twilio-sms"
  tags 'latest'
  pull true
  files tasks.installDist.outputs
}

docker.dependsOn installDist
assemble.dependsOn installDist
installDist.dependsOn jar


